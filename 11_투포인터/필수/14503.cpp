// 14503: 로봇 청소기 (골드5/구현, 시뮬레이션)
#include <iostream>  //표준입력 및 출력을 위한 헤더 파일
#include <vector>  //벡터 자료구조를 사용하기 위한 헤더 파일

using namespace std;  //표준 라이브러리 사용할 때 std:를 생략할 수 있도록

const int CLEAN = 2; //청소된 상태 나타내는 상수

int dx[4] = {0, 1, 0, -1}, dy[4] = {-1, 0, 1, 0}; // 북 동 남 서

int clean(int n, int m, int r, int c, int d, vector<vector<int>> &board) {  //로봇 청소기의 청소 과정 함수
    int cnt = 0;  //청소한 칸 수

    while(true) {  //무한반복
        // 1. 현재 칸이 아직 청소되지 않은 경우, 현재 칸을 청소한다.
        if(board[r][c] != CLEAN) {  //현재 칸 청소되지 않은 경우
            cnt++;  //현재 칸 청소 -> 청소한 칸 수 증가
        }
        board[r][c] = CLEAN;  //현재 칸을 청소된 상태로 표시

        bool find = false; // 현재 칸의 주변 4칸 중 청소되지 않은 빈 칸이 있는가
        for(int i = 0; i < 4; i++) {  //반시계 방향으로 90도 회전
            int nd = (d-i+3) % 4;  //새로운 방향 계산
            int nr = r + dy[nd], nc = c + dx[nd]; //새로운 행과 열 위치 계산

            if(board[nr][nc] == 0) { // 3-2. 아직 청소되지 않은 빈 칸 발견
                find = true;  //청소되지 않은 빈 칸을 발견했음을 표시
                r = nr; c = nc; d = nd;  //로봇의 위치를 새로운 행,열,방향으로 업데이트
                break;  //루프 탈출
            }
        }
        if(find) { // 3. 현재 칸의 주변 4칸 중 청소되지 않은 빈 칸이 있는 경우 1번으로 돌아감
            continue;  //while루프의 처음으로 돌아감
        }

        // 2. 현재 칸의 주변 4칸 중 청소되지 않은 빈 칸이 없는 경우
        int bd = (d+2) % 4;  //뒤쪽 방향 계산
        int br = r + dy[bd], bc = c + dx[bd];  //뒤쪽 칸의 행,열 위치 계산

        // [바라보는 방향을 유지한 채로 한 칸 후진할 수 있는가]
        // 2-2. 뒤쪽 칸이 벽이라 후진할 수 없는 경우
        if(board[br][bc] == 1) {  //뒤쪽 칸이 벽인 경우
            return cnt;  //청소한 칸 수 반환하고 함수 종료
        }
        // 2-1. 바라보는 방향을 유지한 채로 한 칸 후진
        r = br; c = bc;  //로봇의 위치를 뒤쪽으로 이동
    }
    return cnt;  //청소한 칸 수 반환
}

/*
 * [로봇 청소기 작동]
 * 1. 현재 칸이 아직 청소되지 않은 경우, 현재 칸을 청소한다.
 * 2. 현재 칸의 주변 4칸 중 청소되지 않은 빈 칸이 없는 경우,
 *  2-1. 바라보는 방향을 유지한 채로 한 칸 후진할 수 있다면 한 칸 후진하고 1번으로 돌아간다.
 *  2-2. 바라보는 방향의 뒤쪽 칸이 벽이라 후진할 수 없다면 작동을 멈춘다.
 * 3. 현재 칸의 주변 4칸 중 청소되지 않은 빈 칸이 있는 경우,
 *  3-1. 반시계 방향으로 90º 회전한다.
 *  3-2. 바라보는 방향을 기준으로 앞쪽 칸이 청소되지 않은 빈 칸인 경우 한 칸 전진한다.
 *  3-3. 1번으로 돌아간다.
*/

int main() {  //메인 함수
    int n, m, r, c, d;  //입력 변수
    vector<vector<int>> board;  //청소 구역

    // 입력
    cin >> n >> m;  //구역의 크기 입력
    cin >> r >> c >> d;  //시작 위치와 방향 입력
    board.assign(n, vector<int> (m, 0));  //구역 초기화
    for(int i = 0; i < n; i++) {  //n번 반복
        for(int j = 0; j < m; j++) {  //m번 반복
            cin >> board[i][j];  //구역 상태 입력
        }
    }

    // 연산 & 출력
    cout << clean(n, m, r, c, d, board);  //청소 과정 수행 후 결과 출력
    
    return 0;  //함수 종료
}